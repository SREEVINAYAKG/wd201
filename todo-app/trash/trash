// app.put("/todos/:id/markAsCompleted", async function (request, response) {
//   const todo = await Todo.findByPk(request.params.id);
//   if (!todo) {
//     return response.status(404).json({ error: "Todo not found" });
//   }
//   try {
//     const updatedTodo = await todo.markAsCompleted();
//     return response.json(updatedTodo);
//   } catch (error) {
//     console.log(error);
//     return response.status(422).json(error);
//   }
// });



        // const deletedCount = await Todo.destroy({
        //     where:{
        //         id: request.params.id,
        //     },
        // })



          // First, we have to query our database to delete a Todo by ID.
          // Then, we have to respond back with true/false based on whether the Todo was deleted or not.
          // response.send(true)




          


// // const {request,response} = require('express')
// const express = require("express");
// const app = express();
// const bodyParser = require("body-parser");
// app.use(bodyParser.json());

// const { Todo } = require("./models");

// // eslint-disable-next-line no-unused-vars
// app.get("/todos", (request, response) => {
//   // response.send("hello world");
//   console.log("Todo list");
// });

// app.post("/todos", async (request, response) => {
//   console.log("Creating a todo", request.body);
//   try {
//     const todo = await Todo.addTodo({
//       title: request.body.title,
//       dueDate: request.body.dueDate,
//       completed: false,
//     });
//     return response.json(todo);
//   } catch (error) {
//     console.log(error);
//     response.status(422).json(error);
//   }
// });

// app.put("/todos/:id/markAsCompleted", async (request, response) => {
//   console.log("We have to update a todo with ID:", request.params.id);
//   const todo = await Todo.findByPk(request.params.id);
//   try {
//     const updatedTodo = await todo.markAsCompleted();
//     return response.json(updatedTodo);
//   } catch (error) {
//     console.log(error);
//     response.status(422).json(error);
//   }
// });

// // eslint-disable-next-line no-unused-vars
// app.delete("/todos/:id", (request, response) => {
//   console.log("Delete a todo by ID: ", request.params.id);
// });

// module.exports = app;




// app.get("/todos/:id", async function (request, response) {
//   try {
//     const todo = await Todo.findByPk(request.params.id);
    
//     return response.json(todo);
//   } catch (error) {
//     console.log(error);
//     return response.status(422).json(error);
//   }
// });


  // First, we have to query our PostgerSQL database using Sequelize to get list of all Todos.
  // Then, we have to respond with all Todos, like:
  // response.send(todos)

  



      // expect(response.header["content-type"]).toBe(
    //   "application/json; charset=utf-8"
    // );
    // const parsedResponse = JSON.parse(response.text);
    // expect(parsedResponse.id).toBeDefined();



      // test("Marks a todo with the given ID as complete", async () => {
  //   let res = await agent.get("/");
  //   let csrfToken = extractCsrfToken(res);
  //    await agent.post("/todos").send({
  //     title: "Buy milk",
  //     dueDate: new Date().toISOString(),
  //     completed: false,
  //     "_csrf":csrfToken,
  //   });
  //   const groupedTodosResponse = await agent
  //   .get("/")
  //   .set("Accept","application/json");
  //   const parsedGroupedResponse = JSON.parse(groupedTodosResponse.text);
  //   const dueTodayCount = parsedGroupedResponse.allTodos.length;
  //   const latestTodo = parsedGroupedResponse.allTodos[dueTodayCount - 1]; 

  //   res =  await agent.get("/");
  //   csrfToken = extractCsrfToken(res);
  //   const markCompleteResponse = await agent
  //   .put(`/todos/${latestTodo.id}`).send({
  //     "completed":true,
  //     "_csrf":csrfToken,
  //   });
  //   const parsedUpdateResponse = JSON.parse(markCompleteResponse.text);
  //   expect(parsedUpdateResponse.completed).toBe(true);
  // });


  //   let res = await agent.get("/todos");
//   let csrfToken = extractCsrfToken(res);
//   await agent.post("/todos").send({
//     title: "Buy milk",
//     dueDate: new Date().toISOString(),
//     completed: false,
//     _csrf: csrfToken,
//   });
//   const gropuedTodosResponse = await agent
//     .get("/")
//     .set("Accept", "application/json");
//   if (gropuedTodosResponse.headers['content-type'].includes('application/json')) {
//   const parsedGroupedResponse = JSON.parse(gropuedTodosResponse.text);
//   const dueTodayCount = parsedGroupedResponse.allTodos.length;
//   const latestTodo = parsedGroupedResponse.allTodos[dueTodayCount - 1];
//   const status = latestTodo.completed ? false : true;
//   let res2 = await agent.get("/");
//   csrfToken = extractCsrfToken(res2);

//   const response = await agent.put(`/todos/${latestTodo.id}`).send({
//     _csrf: csrfToken,
//     completed: status,
//   });
//   const parsedUpdateResponse = JSON.parse(response.text);
//   expect(parsedUpdateResponse.completed).toBe(true);
// }else{
//   console.error('Expected JSON but received:', gropuedTodosResponse.text);
// }
// });



























  //-----------------------------------------------------------------------//
  // const parsedResponse = JSON.parse(response.text);
  // const todoID = parsedResponse.id;

  // expect(parsedResponse.completed).toBe(false);

  // const markCompleteResponse = await agent
  //   .put(`/todos/${todoID}/markAsCompleted`)
  //   .send();
  // expect(markCompleteResponse.statusCode).toBe(200);
  // const parsedUpdateResponse = JSON.parse(markCompleteResponse.text);
  // expect(parsedUpdateResponse.completed).toBe(true);

  //-----------------------------------------------------------------------------------------//



  // test("Fetches all todos in the database using /todos endpoint", async () => {
  //   await agent.post("/todos").send({
  //     title: "Buy xbox",
  //     dueDate: new Date().toISOString(),
  //     completed: false,
  //   });
  //   await agent.post("/todos").send({
  //     title: "Buy ps3",
  //     dueDate: new Date().toISOString(),
  //     completed: false,
  //   });
  //   const response = await agent.get("/todos");
  //   const parsedResponse = JSON.parse(response.text);

  //   expect(parsedResponse.length).toBe(4);
  //   expect(parsedResponse[3]["title"]).toBe("Buy ps3");
  // });

//   test("Deletes a todo with the given ID if it exists and sends a boolean response", async () => {
//     // FILL IN YOUR CODE HERE
//     const response = await agent.post("/todos").send({
//         title: "Buy milk",
//         dueDate: new Date().toISOString(),
//         completed: false,
//     });
//     const parsedResponse = JSON.parse(response.text);
//     const todoID = parsedResponse.id;
//     const deleteResponse = await agent.delete(`/todos/${todoID}`);
//     const parsedDeleteResponse = JSON.parse(deleteResponse.text);
//     expect(parsedDeleteResponse).toBe(true);
//   });
// });








// const request = require("supertest");
// const db = require("../models/index");

// const app = require("../app");

// let server, agent;

// // eslint-disable-next-line no-undef
// describe("Todo test suite", () => {
//   // eslint-disable-next-line no-undef
//   beforeAll(async () => {
//     await db.sequelize.sync({ force: true });
//     server = app.listen(3000, () => {});
//     agent = request.agent(server);
//   });
//   afterAll(async () => {
//     await db.sequelize.close();
//     server.close();
//   });

//   test("responds with json at /todos", async () => {
//     const response = await agent.post("/todos").send({
//       title: "Buy milk",
//       dueDate: new Date().toISOString(),
//       completed: false,
//     });
//     expect(response.statusCode).toBe(200);
//     expect(response.header["content-type"]).toBe(
//       "application/json; charset=utf-8"
//     );
//     const parsedResponse = JSON.parse(response.text);
//     expect(parsedResponse.id).toBeDefined();
//   });
//   test("Mark a todo as complete", async () => {
//     const response = await agent.post("/todos").send({
//       title: "Buy milk",
//       dueDate: new Date().toISOString(),
//       completed: false,
//     });
//     const parsedResponse = JSON.parse(response.text);
//     const todoId = parsedResponse.id;

//     expect(parsedResponse.completed).toBe(false);

//     const markCompleteResponse = await agent
//       .put(`/todos/${todoId}/markAsCompleted`)
//       .send();
//     const parsedUpdateResponse = JSON.parse(markCompleteResponse.text);
//     expect(parsedUpdateResponse.completed).toBe(true);
//   });
// });
